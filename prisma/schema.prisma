generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

enum UserRole {
  ADMIN
  USER
  AUTHOR
  EDITOR
  MODERATOR
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pg_trgm, unaccent]
}

model Contact {
  id           Int       @id @default(autoincrement())
  created_by   Int
  title        String
  message      String
  created_at   DateTime?
  updated_at   DateTime?
  deleted_at   DateTime?
  name         String?
  email        String?
  phone_number String?
  is_active    Int       @default(1)

  @@map("contacts")
}

model Role {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         UserRole  @unique
  description  String?
  permissions  String[]  @default([])
  users        User[]
  created_at   DateTime  @default(now()) @map("createdAt")
  updated_at   DateTime  @updatedAt @map("updated_at")

  @@map("roles")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  first_name      String
  last_name       String
  sex             Boolean   @default(true)
  birthday        DateTime?
  address         String?
  avatar          String?
  remember_token  String?
  is_active       Boolean   @default(true)
  last_login      DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  role_id         String?   @db.Uuid
  role            Role?     @relation(fields: [role_id], references: [id])
  last_logout     DateTime?
  slack_webhook_url String?
  deleted_at      DateTime?
  coin            BigInt    @default(1000)
  locale          String?   @default("en")
  group_id        Int?      @default(1)

  // Indexes for optimal query performance
  @@index([role_id])
  @@index([is_active])
  @@index([created_at])
  @@index([last_login])
  @@index([locale])
  @@index([group_id])
  @@index([first_name, last_name])
  @@index([is_active, role_id])
  @@index([created_at, is_active])
  @@map("users")
}

model WordType {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime?
  updated_at DateTime?

  @@map("word_types")
}

model PasswordReset {
  email      String
  token      String
  created_at DateTime?

  @@id([email, token])
  @@map("password_resets")
}

model Subject {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  is_active   Int
  created_at  DateTime?
  updated_at  DateTime?

  @@map("subjects")
}

model UserProfile {
  id          Int       @id @default(autoincrement())
  user_id     Int
  height      Int?
  weight      Int?
  round_one   Int?
  round_two   Int?
  round_three Int?
  image_one   String?
  image_two   String?
  image_three String?
  website     String?
  hobby       String?
  slogan      String?
  created_at  DateTime?
  updated_at  DateTime?

  @@map("user_profiles")
}

model Question {
  id         Int       @id @default(autoincrement())
  question   String
  score      Int
  type       String
  created_at DateTime?
  updated_at DateTime?
  deleted_at DateTime?

  @@map("questions")
}

model Tag {
  id         Int       @id @default(autoincrement())
  name       String
  is_active  Int       @default(0)
  created_at DateTime?
  updated_at DateTime?
  deleted_at DateTime?

  @@map("tags")
}

model Story {
  id        String   @id @default(cuid())
  prompt    String
  content   String
  title     String?
  
  // Story configuration
  config    Json?    // Store the full StoryConfig
  preferences Json?  // Store user preferences
  template_id String?
  
  // Story sections
  sections  Json?    // Store structured sections (story, moral, quiz, glossary)
  
  // Metadata
  metadata  Json?    // Store generation metadata
  word_count Int?
  language_ratio Json? // {vi: 70, en: 30}
  readability_score Float?
  generation_time Int? // in milliseconds
  
  // User tracking (optional)
  user_id   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoryTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  category    String   // 'tech', 'business', 'life', 'education'
  config      Json     // Partial StoryConfig
  popular     Boolean  @default(false)
  usage_count Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserPreferences {
  id          String   @id @default(cuid())
  user_id     String?  // Optional - can work without auth
  session_id  String?  // For anonymous users
  
  // Story preferences
  preferences Json     // StoryPreferences object
  
  // Usage tracking
  last_used_template_id String?
  favorite_templates    String[] // Array of template IDs
  usage_count          Int      @default(1)
  
  // Metadata
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@unique([user_id])
  @@unique([session_id])
  @@map("user_preferences")
}

model StoryUsageAnalytics {
  id              String   @id @default(cuid())
  user_id         String?
  session_id      String?
  
  // Story details
  story_id        String
  template_id     String?
  version_type    String   // 'simple', 'advanced', 'pro', 'enterprise'
  
  // Configuration used
  language_ratio  Json     // {vi: 70, en: 30}
  story_length    String   // 'short', 'medium', 'long'
  readability_level String // 'A1', 'A2', etc.
  tone            String   // 'formal', 'casual', etc.
  
  // Generation metrics
  generation_time Int      // milliseconds
  word_count      Int
  success         Boolean  @default(true)
  
  created_at      DateTime @default(now())
  
  @@map("story_usage_analytics")
}

model StoryVersion {
  id              String   @id @default(cuid())
  name            String   // 'Simple', 'Advanced', 'Pro', 'Enterprise'
  slug            String   @unique // 'simple', 'advanced', 'pro', 'enterprise'
  description     String
  icon            String
  color_scheme    String   // 'blue', 'purple', 'green', 'gold'
  
  // Features
  features        Json     // Array of feature objects
  limitations     Json     // Array of limitation objects
  
  // Pricing (if applicable)
  is_free         Boolean  @default(true)
  price_monthly   Float?
  price_yearly    Float?
  
  // Configuration
  max_stories_per_day    Int?
  max_word_count         Int?
  available_templates    String[] // Template IDs available for this version
  available_languages    String[] // Language codes
  advanced_features      Json     // Feature flags
  
  // Status
  is_active       Boolean  @default(true)
  is_beta         Boolean  @default(false)
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  @@map("story_versions")
}

model UserSubscription {
  id              String   @id @default(cuid())
  user_id         String   @unique
  version_slug    String   // References StoryVersion.slug
  
  // Subscription details
  status          String   // 'active', 'inactive', 'trial', 'expired'
  started_at      DateTime
  expires_at      DateTime?
  
  // Usage tracking
  stories_used_today     Int      @default(0)
  stories_used_this_month Int     @default(0)
  last_reset_date        DateTime @default(now())
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  @@map("user_subscriptions")
}
