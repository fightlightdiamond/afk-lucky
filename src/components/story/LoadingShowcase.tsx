"use client";

import { useState } from "react";
import StoryLoadingStages from "./StoryLoadingStages";
import MagicalLoader from "./MagicalLoader";
import SmartProgressLoader from "./SmartProgressLoader";
import InteractiveLoader from "./InteractiveLoader";

type LoadingType = "stages" | "magical" | "smart" | "interactive";

const loadingTypes: Array<{
  id: LoadingType;
  name: string;
  description: string;
  icon: string;
  color: string;
}> = [
  {
    id: "interactive",
    name: "Interactive Loading",
    description: "T∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng, c√≥ th·ªÉ nh·∫•p ƒë·ªÉ th√™m nƒÉng l∆∞·ª£ng",
    icon: "üéÆ",
    color: "from-indigo-500 to-purple-600",
  },
  {
    id: "smart",
    name: "Smart Progress",
    description: "Thanh ti·∫øn tr√¨nh th√¥ng minh v·ªõi th·ªëng k√™ th·ªùi gian th·ª±c",
    icon: "üß†",
    color: "from-blue-500 to-cyan-600",
  },
  {
    id: "magical",
    name: "Magical Loading",
    description: "Hi·ªáu ·ª©ng ma thu·∫≠t v·ªõi particles v√† typing animation",
    icon: "‚ú®",
    color: "from-purple-500 to-pink-600",
  },
  {
    id: "stages",
    name: "Loading Stages",
    description: "Hi·ªÉn th·ªã t·ª´ng giai ƒëo·∫°n t·∫°o truy·ªán m·ªôt c√°ch chi ti·∫øt",
    icon: "üìã",
    color: "from-green-500 to-teal-600",
  },
];

export default function LoadingShowcase() {
  const [activeLoader, setActiveLoader] = useState<LoadingType | null>(null);
  const [demoRunning, setDemoRunning] = useState(false);

  const startDemo = (type: LoadingType) => {
    setActiveLoader(type);
    setDemoRunning(true);
  };

  const stopDemo = () => {
    setActiveLoader(null);
    setDemoRunning(false);
  };

  const runAllDemo = async () => {
    for (const type of loadingTypes) {
      setActiveLoader(type.id);
      setDemoRunning(true);
      await new Promise((resolve) => setTimeout(resolve, 5000)); // 5 seconds each
    }
    stopDemo();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-6">
      {/* Loading Components */}
      {activeLoader === "stages" && (
        <StoryLoadingStages isLoading={demoRunning} onComplete={stopDemo} />
      )}
      {activeLoader === "magical" && <MagicalLoader isLoading={demoRunning} />}
      {activeLoader === "smart" && (
        <SmartProgressLoader
          isLoading={demoRunning}
          estimatedTime={30}
          onComplete={stopDemo}
        />
      )}
      {activeLoader === "interactive" && (
        <InteractiveLoader isLoading={demoRunning} onComplete={stopDemo} />
      )}

      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">
            üé® Loading Experience Showcase
          </h1>
          <p className="text-xl text-gray-600 mb-6">
            Kh√°m ph√° c√°c ki·ªÉu loading ƒë·ªôc ƒë√°o cho tr·∫£i nghi·ªám t·∫°o truy·ªán
          </p>

          {/* Global controls */}
          <div className="flex justify-center gap-4 mb-8">
            <button
              onClick={runAllDemo}
              disabled={demoRunning}
              className="px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg font-medium hover:from-purple-700 hover:to-pink-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
            >
              üé¨ Demo T·∫•t C·∫£ (20s)
            </button>

            {demoRunning && (
              <button
                onClick={stopDemo}
                className="px-6 py-3 bg-red-500 hover:bg-red-600 text-white rounded-lg font-medium transition-all"
              >
                ‚èπÔ∏è D·ª´ng Demo
              </button>
            )}
          </div>
        </div>

        {/* Loading Types Grid */}
        <div className="grid md:grid-cols-2 gap-8">
          {loadingTypes.map((type) => (
            <div
              key={type.id}
              className={`relative overflow-hidden rounded-2xl shadow-xl transition-all duration-300 hover:shadow-2xl hover:scale-105 ${
                activeLoader === type.id
                  ? "ring-4 ring-purple-500 ring-opacity-50"
                  : ""
              }`}
            >
              {/* Card Background */}
              <div className={`bg-gradient-to-br ${type.color} p-8 text-white`}>
                <div className="flex items-center mb-4">
                  <span className="text-4xl mr-4">{type.icon}</span>
                  <div>
                    <h3 className="text-2xl font-bold">{type.name}</h3>
                    <p className="text-white/80 text-sm">{type.description}</p>
                  </div>
                </div>

                {/* Features */}
                <div className="mb-6">
                  <h4 className="font-semibold mb-2">‚ú® T√≠nh nƒÉng:</h4>
                  <ul className="text-sm text-white/90 space-y-1">
                    {type.id === "interactive" && (
                      <>
                        <li>‚Ä¢ T∆∞∆°ng t√°c b·∫±ng c√°ch nh·∫•p chu·ªôt</li>
                        <li>‚Ä¢ ƒê·ªông vi√™n v√† fun facts</li>
                        <li>‚Ä¢ Hi·ªáu ·ª©ng tr√°i tim bay</li>
                        <li>‚Ä¢ T√πy ch·ªçn √¢m thanh</li>
                      </>
                    )}
                    {type.id === "smart" && (
                      <>
                        <li>‚Ä¢ Thanh ti·∫øn tr√¨nh th√¥ng minh</li>
                        <li>‚Ä¢ ∆Ø·ªõc t√≠nh th·ªùi gian ch√≠nh x√°c</li>
                        <li>‚Ä¢ Th·ªëng k√™ th·ªùi gian th·ª±c</li>
                        <li>‚Ä¢ C·∫£nh b√°o overtime</li>
                      </>
                    )}
                    {type.id === "magical" && (
                      <>
                        <li>‚Ä¢ Hi·ªáu ·ª©ng particles ƒë·ªông</li>
                        <li>‚Ä¢ Typing animation</li>
                        <li>‚Ä¢ Gradient background</li>
                        <li>‚Ä¢ Tips xoay v√≤ng</li>
                      </>
                    )}
                    {type.id === "stages" && (
                      <>
                        <li>‚Ä¢ Hi·ªÉn th·ªã t·ª´ng giai ƒëo·∫°n</li>
                        <li>‚Ä¢ Progress bar cho m·ªói stage</li>
                        <li>‚Ä¢ Tr·∫°ng th√°i ho√†n th√†nh</li>
                        <li>‚Ä¢ M√¥ t·∫£ chi ti·∫øt</li>
                      </>
                    )}
                  </ul>
                </div>

                {/* Action Button */}
                <button
                  onClick={() => startDemo(type.id)}
                  disabled={demoRunning}
                  className="w-full py-3 bg-white/20 hover:bg-white/30 disabled:bg-white/10 disabled:cursor-not-allowed rounded-lg font-medium transition-all backdrop-blur-sm border border-white/30"
                >
                  {activeLoader === type.id ? "üîÑ ƒêang Demo..." : "‚ñ∂Ô∏è Xem Demo"}
                </button>
              </div>

              {/* Status indicator */}
              {activeLoader === type.id && (
                <div className="absolute top-4 right-4">
                  <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Tips Section */}
        <div className="mt-16 bg-white rounded-2xl shadow-lg p-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">
            üí° M·∫πo S·ª≠ D·ª•ng Loading Experience
          </h2>

          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <h3 className="font-semibold text-gray-700">
                üéØ Khi n√†o s·ª≠ d·ª•ng:
              </h3>
              <ul className="space-y-2 text-gray-600">
                <li>
                  <strong>Interactive:</strong> Khi mu·ªën ng∆∞·ªùi d√πng tham gia v√†o
                  qu√° tr√¨nh
                </li>
                <li>
                  <strong>Smart Progress:</strong> Khi c·∫ßn th√¥ng tin chi ti·∫øt v·ªÅ
                  ti·∫øn tr√¨nh
                </li>
                <li>
                  <strong>Magical:</strong> Khi mu·ªën t·∫°o c·∫£m gi√°c th√∫ v·ªã, ma
                  thu·∫≠t
                </li>
                <li>
                  <strong>Stages:</strong> Khi mu·ªën gi·∫£i th√≠ch quy tr√¨nh l√†m
                  vi·ªác
                </li>
              </ul>
            </div>

            <div className="space-y-4">
              <h3 className="font-semibold text-gray-700">‚ö° L·ª£i √≠ch:</h3>
              <ul className="space-y-2 text-gray-600">
                <li>‚Ä¢ Gi·∫£m c·∫£m gi√°c ch·ªù ƒë·ª£i nh√†m ch√°n</li>
                <li>‚Ä¢ TƒÉng s·ª± t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng</li>
                <li>‚Ä¢ Cung c·∫•p th√¥ng tin h·ªØu √≠ch</li>
                <li>‚Ä¢ T·∫°o tr·∫£i nghi·ªám ƒë√°ng nh·ªõ</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
